rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function prefix() {
      return /databases/$(database)/documents;
    }

    match /users/{userId} {
      allow create: if isSignedIn();
      allow update, delete: if isOwnerOf(userId);
      allow read: if isOwnerOf(userId) || isSignedIn();
    }

    match /ids/{email} {
      allow create: if isSignedIn();
      allow update, delete: if isOwnerOfEmail(email);
      allow read: if isOwnerOfEmail(email) || isSignedIn();
    }

    match /skills/{email} {
      allow create: if isSignedIn();
      allow update, delete: if isOwnerOfEmail(email);
      allow read: if isOwnerOfEmail(email) || isSignedIn();
    }

    match /interests/{email} {
      allow create: if isSignedIn();
      allow update, delete: if isOwnerOfEmail(email);
      allow read: if isOwnerOfEmail(email) || isSignedIn();
    }

    match /projects/{projectCode} {
      allow create: if isSignedIn() && notExisting(projectCode) && isValidProject();
      allow update, delete: if currentUser().token.email == existingData().owner;
      allow read: if isValidUser();

      function existing(code) {
        return exists(/$(prefix())/projects/$(code))
      }
      function notExisting(code) {
        return !existing(code)
      }

      function isValidProject() {
        return
          incomingData().code != null &&
          incomingData().owner != null;
      }

      function isValidUser() {
        return
          currentUser().token.email == existingData().owner ||
          currentUser().token.email in existingData().members;
      }

      function projectData() {
         return get(/$(prefix())/projects/$(projectCode)).data
      }

      match /documents/{docId} {
        allow create: if isAllowedUser();
        allow update, delete: if isAllowedUser();
        allow read: if isAllowedUser();

        function isAllowedUser() {
          return
            currentUser().token.email == projectData().owner ||
            currentUser().token.email in projectData().members;
        }
      }
    }

    function currentUser() {
      return request.auth;
    }
    function isSignedIn() {
      return currentUser() != null;
    }
    function isOwnerOf(userId) {
      return currentUser().uid == userId;
    }
    function isOwnerOfEmail(email) {
      return currentUser().token.email == email;
    }

    function existingData() {
      return resource.data;
    }
    function incomingData() {
      return request.resource.data;
    }
  }
}